name: 'Docker Build and Push'
description: 'Builds and pushes Docker image with proper tagging'
inputs:
  registry:
    description: 'Docker registry'
    required: false
    default: 'docker.io'
  username:
    description: 'Registry username'
    required: true
  password:
    description: 'Registry password'
    required: true
  image-name:
    description: 'Image name (without registry)'
    required: true
  build-args:
    description: 'Build arguments'
    required: false
    default: ''
  context:
    description: 'Build context'
    required: false
    default: '.'
  dockerfile:
    description: 'Dockerfile path'
    required: false
    default: './Dockerfile'
  push:
    description: 'Push image to registry'
    required: false
    default: 'true'
  extra-tags:
    description: 'Additional tags to apply to the image'
    required: false
    default: ''
outputs:
  image-tag:
    description: 'Full image tag with SHA'
    value: ${{ steps.meta.outputs.tags }}
  image-digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  version:
    description: 'Version tag'
    value: ${{ steps.meta.outputs.version }}

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Registry
      if: inputs.push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ inputs.registry }}/${{ inputs.image-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: ${{ inputs.push }}
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ inputs.extra-tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build-args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64