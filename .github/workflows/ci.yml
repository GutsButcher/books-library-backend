name: CI Pipeline

on:
  push:
    branches: [ dev, staging, main ]
  pull_request:
    branches: [ dev, staging, main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: gwynbliedd/book-library

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java and Maven
      uses: ./.github/actions/setup-java-maven
      with:
        java-version: ${{ env.JAVA_VERSION }}

    - name: Run tests
      run: mvn clean test

    - name: Generate test report
      if: always()
      run: mvn surefire-report:report-only

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/

    - name: Code Coverage
      run: mvn jacoco:report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    outputs:
      artifact-version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java and Maven
      uses: ./.github/actions/setup-java-maven
      with:
        java-version: ${{ env.JAVA_VERSION }}

    - name: Extract version
      id: version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Application version: $VERSION"

    - name: Build application
      run: mvn clean package -DskipTests

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: app-jar
        path: target/*.jar

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.docker-build.outputs.image-tag }}
      image-digest: ${{ steps.docker-build.outputs.image-digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v3
      with:
        name: app-jar
        path: target/

    - name: Build and Push Docker Image
      id: docker-build
      uses: ./.github/actions/docker-build-push
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        image-name: ${{ env.IMAGE_NAME }}
        push: ${{ github.event_name == 'push' }}

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.docker-build.outputs.image-tag }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'