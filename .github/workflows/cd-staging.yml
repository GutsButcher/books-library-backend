name: CD - Deploy to Staging

on:
  push:
    branches: [ staging ]
  workflow_dispatch:
    inputs:
      image-tag:
        description: 'Docker image tag to deploy'
        required: false
        type: string

env:
  ENVIRONMENT: staging
  NAMESPACE: book-library-staging
  RELEASE_NAME: book-library-staging

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get image tag
      id: image-tag
      run: |
        if [ -n "${{ github.event.inputs.image-tag }}" ]; then
          echo "tag=${{ github.event.inputs.image-tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=staging-$(date +'%Y%m%d')-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy with Helm (Dry Run)
      uses: ./.github/actions/helm-deploy
      with:
        release-name: ${{ env.RELEASE_NAME }}
        namespace: ${{ env.NAMESPACE }}
        environment: ${{ env.ENVIRONMENT }}
        image-tag: ${{ steps.image-tag.outputs.tag }}
        kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}
        dry-run: 'true'

    - name: Deploy with Helm
      uses: ./.github/actions/helm-deploy
      with:
        release-name: ${{ env.RELEASE_NAME }}
        namespace: ${{ env.NAMESPACE }}
        environment: ${{ env.ENVIRONMENT }}
        image-tag: ${{ steps.image-tag.outputs.tag }}
        kubeconfig: ${{ secrets.KUBECONFIG_STAGING }}
        dry-run: 'false'

    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Run basic health checks
        STAGING_URL="https://staging-book-library.example.com"
        
        echo "Running smoke tests against $STAGING_URL"
        
        # Health check
        curl -f "$STAGING_URL/actuator/health" || exit 1
        
        # API check
        curl -f "$STAGING_URL/api/books" || exit 1
        
        echo "Smoke tests passed!"

    - name: Create deployment record
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'staging',
            description: 'Deployed to staging environment',
            auto_merge: false,
            required_contexts: [],
            payload: {
              image_tag: '${{ steps.image-tag.outputs.tag }}',
              namespace: '${{ env.NAMESPACE }}'
            }
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: 'https://staging-book-library.example.com',
            description: 'Deployment successful'
          });

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Staging Deployment ${{ job.status }}
          Image: ${{ steps.image-tag.outputs.tag }}
          Environment: ${{ env.ENVIRONMENT }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}